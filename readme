Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Connor Brown

------------------------------------------------------------------------
Student 2: What is your name?

Laura Hwa

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. 
Such documents include the course's lecture slides and precept handouts.

The course's current staff members outside of class time through 
office hours.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. 
Such documents include the course's lecture slides and precept handouts.

The course's current staff members outside of class time through 
office hours.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

I'd say that, although frustating, this assignment was actually quite 
helpful. The sheer amount of code in the API implementation was 
intimidating; but by the time I actually managed to read through all of 
it, I felt more comfortable with navigating such complex multi-file 
programs. 

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

This assignment had a steep learning curve to become familiar with the
existing APIs. However, after reading through what the functions do,
specifically the path.c and path.h files, I could better understand the
needed functionality of file tree invariants.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

N/A 

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

checkerDT.c:56:11: Variable oNInspect used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path. (Use -usedef to inhibit warning)
checkerDT.c:70:40: Variable oNInspect1 used before definition
checkerDT.c:71:40: Variable oNInspect2 used before definition
checkerDT.c:85:40: Variable oNInspect1 used before definition
checkerDT.c:86:40: Variable oNInspect2 used before definition

- For all of the above, the functions Node_getChild and Node_getPath
 guarantee that these variables are defined before they are used.

dtGood.c: (in function DT_traversePath)
dtGood.c:94:42: Variable ulChildID used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path. (Use -usedef to inhibit warning)

- ulChildID is defined by the outcome of the Node_hasChild function which
stores the ulChildID in function's third argument. Based on the nodeDT.h
specification for Node_hasChild, ulChildID will always be defined, either
with the correct index for where the child was found or where it should be. 

nodeDTGood.c: (in function Node_new)
nodeDTGood.c:148:48: Variable ulIndex used before definition

- Same reasoning as second warning. (Node_hasChild was used earlier)

nodeDTGood.c: (in function Node_free)
nodeDTGood.c:180:35: Variable ulIndex used before definition

- Same reasoning as second warning, but from DynArray_bsearch function 
used earlier.

path.h:94:13: Function exported but not used outside path: Path_getComponent
  A declaration is exported, but not used outside this module. Declaration can
  use static qualifier. (Use -exportlocal to inhibit warning)
   path.c:316:1: Definition of Path_getComponent

- Assignment specs said that we can assume path.h, path.c, dynarray.c, and
dynarray.h are correct. 

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None.

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

nodeFT.c:
      nodeFT.c:173:48: Variable ulIndex used before definition
      nodeFT.c:207:35: Variable ulIndex used before definition

      We immediately disagree with these warnings because they also 
      show up in nodeDTGood.c. But looking at the code more deeply, it's
      clear that ulIndex is, in fact, defined by the time that this 
      statement is executed. In both instances, Node_hasChild() is
      called with &ulIndex as one of the arguments. Ultimately, this
      results in the value of ulIndex being defined as either the index 
      of the child, or the would-be index of the child, if it were 
      present (see Dynarray_bsearch() for more detail).

ft.c: 
      ft.c:93:42: Variable ulChildID used before definition
      ft.c:219:10: Variable ulIndex used before definition
      ft.c:348:10: Variable ulIndex used before definition

      We disagree with the above warnings for the exact same reasons as 
      stated above, verbatim.

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

nodeFT.c:
      nodeFT.c: line 262: medium priority:
      Do you want to validate 'pvNewContent' through an assert?

      We disagree with the warning since a file could have a NULL 
      contents.

ft.c:
      ft.c: line 301: medium priority:
      Do you want to validate 'pvContents' through an assert?

      ft.c: line 463: medium priority:
      Do you want to validate 'pvNewContents' through an assert?

      We disagree with the warning since a file could have a NULL 
      contents.

------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insert()
---------------------------------------------------------------
         ./bdtBad2        BDT_freeSubtree()
---------------------------------------------------------------
         ./bdtBad3        BDT_addChild()
---------------------------------------------------------------
         ./bdtBad4        BDT_strlenAccumulate()
---------------------------------------------------------------
         ./bdtBad5        BDT_findNode()
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

- For improved modularity, an additional function that takes two 
arguments can be created to Path_free the memory taken up by the first
argument and set the second argument (a *Node_T) to NULL. Code of this
format is reused across dtGood.c and nodeDTGood.c when returning exit
statuses. A variant of this free / NULL-setting function can be written
for when a path and a node need to be freed.

- The above functionality can be called in a separate checker function
that returns the correct return statuses based on invariants like in
CheckerDT_isValid. This reduces the repetitive return code currently 
present in both implementations. For Node_new in nodeDTGood.c, there is
code about "validating the parent" that is similar to the checks we wrote
and can be moved elsewhere for better readability.

- In DT_insert within dtGood.c, a static helper function for path-level 
traversal can help with rebuilding the path needed in inserting a 
new directory.

- Node_compare is not used anywhere else outside of nodeDTGood.c, so it
  should be redefined as a static function.


------------------------------------------------------------------------
